// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Travel_agency.Models;

#nullable disable

namespace Travel_agency.Migrations
{
    [DbContext(typeof(AgencyContext))]
    [Migration("20230506152353_Migration2")]
    partial class Migration2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Travel_agency.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"));

                    b.Property<string>("ClientAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Travel_agency.Models.Destination", b =>
                {
                    b.Property<int>("DestinationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DestinationId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("DepartDate")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReturnDate")
                        .HasColumnType("int");

                    b.HasKey("DestinationId");

                    b.HasIndex("ClientId");

                    b.ToTable("Destinations");
                });

            modelBuilder.Entity("Travel_agency.Models.Hotel", b =>
                {
                    b.Property<int>("HotelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotelId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HotelAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HotelName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HotelId");

                    b.HasIndex("ClientId");

                    b.ToTable("Hotels");
                });

            modelBuilder.Entity("Travel_agency.Models.TicketBooking", b =>
                {
                    b.Property<int>("TicketBookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketBookingId"));

                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.Property<int>("SeatNumber")
                        .HasColumnType("int");

                    b.Property<int>("TicketDate")
                        .HasColumnType("int");

                    b.HasKey("TicketBookingId");

                    b.HasIndex("DestinationId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Travel_agency.Models.TourPackage", b =>
                {
                    b.Property<int>("TourPackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TourPackageId"));

                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.Property<int>("MinPrice")
                        .HasColumnType("int");

                    b.Property<int>("No_Of_Days")
                        .HasColumnType("int");

                    b.Property<int>("No_Of_Persons")
                        .HasColumnType("int");

                    b.Property<string>("PackageName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TourPackageId");

                    b.HasIndex("DestinationId");

                    b.ToTable("TourPackages");
                });

            modelBuilder.Entity("Travel_agency.Models.TravelGuide", b =>
                {
                    b.Property<int>("TravelGuideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TravelGuideId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("TravelGuideDomain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TravelGuideName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TravelGuideId");

                    b.HasIndex("ClientId");

                    b.ToTable("TravelGuides");
                });

            modelBuilder.Entity("Travel_agency.Models.Destination", b =>
                {
                    b.HasOne("Travel_agency.Models.Client", "Client")
                        .WithMany("Destinations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Travel_agency.Models.Hotel", b =>
                {
                    b.HasOne("Travel_agency.Models.Client", "Client")
                        .WithMany("Hotel")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Travel_agency.Models.TicketBooking", b =>
                {
                    b.HasOne("Travel_agency.Models.Destination", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");
                });

            modelBuilder.Entity("Travel_agency.Models.TourPackage", b =>
                {
                    b.HasOne("Travel_agency.Models.Destination", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");
                });

            modelBuilder.Entity("Travel_agency.Models.TravelGuide", b =>
                {
                    b.HasOne("Travel_agency.Models.Client", "Client")
                        .WithMany("TravelGuides")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Travel_agency.Models.Client", b =>
                {
                    b.Navigation("Destinations");

                    b.Navigation("Hotel");

                    b.Navigation("TravelGuides");
                });
#pragma warning restore 612, 618
        }
    }
}
